import argparse
import logging
import os
import sys
from .. import io

LOG = logging.getLogger()


def read_ctg_ids(stream):
    """For now, simply one ctg_id per line.
    """
    for line in stream:
        yield line.strip()

def run(ctg_list_fn, scattered_fn):
    LOG.info('Scatting ctg_ids from {!r} into {!r}.'.format(
        ctg_list_fn, scattered_fn))
    basedir = os.path.dirname(os.path.abspath(scattered_fn))
    rootdir = os.path.dirname(os.path.dirname(os.path.dirname(basedir))) # for now
    jobs = list()
    for i, ctg_id in enumerate(read_ctg_ids(open(ctg_list_fn))):
        #job_name = 'phasing-{:03d}'.format(i) # wildcard value

        job = dict()
        job['input'] = dict( # These were generated by fetch_reads.py, so we find them by convention.
                ref_fasta = '{rootdir}/3-unzip/reads/{ctg_id}/ref.fa'.format(**locals()),
                read_fasta = '{rootdir}/3-unzip/reads/{ctg_id}/reads.fa'.format(**locals()),
        )
        job['output'] = dict(
                rid_to_phase_out = '{rootdir}/3-unzip/0-phasing/{ctg_id}/rid_to_phase'.format(**locals()),
        )
        job['params'] = dict()
        job['wildcards'] = {'ctg_id': ctg_id} # This should match the wildcard used in the pattern elsewhere.
        jobs.append(job)
    io.serialize(scattered_fn, jobs)


class HelpF(argparse.RawTextHelpFormatter, argparse.ArgumentDefaultsHelpFormatter):
    pass


def parse_args(argv):
    description = 'Scatter the tasks to phase the reads.'
    epilog = 'To learn about inputs and outputs in the serialized jobs, grep repo for TASK_RUN_PHASING_SCRIPT.'
    parser = argparse.ArgumentParser(
        description=description,
        epilog=epilog,
        formatter_class=HelpF,
    )
    parser.add_argument(
        '--ctg-list-fn',
        help='Input. For now, each line is a ctg_id.',
    )
    parser.add_argument(
        '--scattered-fn',
        help='JSON list of jobs, where each is a dict of input/output/params/wildcards.',
    )
    args = parser.parse_args(argv[1:])
    return args


def main(argv=sys.argv):
    args = parse_args(argv)
    logging.basicConfig(level=logging.INFO)
    run(**vars(args))


if __name__ == '__main__':  # pragma: no cover
    main()
